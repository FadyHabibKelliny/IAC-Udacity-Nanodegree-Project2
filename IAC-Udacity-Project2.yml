Description: Fady Habib - Udacity project2

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  IType:
    Description: instance Type
    Type: String

  instanceImageID:
    Description: instance ID
    Type: String

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  PubSub1CIDR:
    Type: String
    Default: 10.0.0.0/24

  PubSub2CIDR:
    Type: String
    Default: 10.0.1.0/24

  PrivSub1CIDR:
    Type: String
    Default: 10.0.2.0/24

  PrivSub2CIDR:
    Type: String
    Default: 10.0.3.0/24

Resources:

  MainVPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  IGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MainVPC

  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubSub1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PubSub2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PubSub2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivSub1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivSub1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivSub2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivSub2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachment
    Properties: 
      Domain: MainVPC

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PubSub1

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachment
    Properties:
      Domain: MainVPC

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PubSub2

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: name
          Value: !Sub ${EnvironmentName} Public Routes

  PublicRoutes: 
    Type: AWS::EC2::Route
    DependsOn: IGAttachment
    Properties: 
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSub1

  PubSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSub2
    

  PrivRTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  PrivRoutes1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoutes2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivRTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivRTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)


  PrivSub1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTable1
      SubnetId: !Ref PrivSub1


  PrivSub2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivRTable2
      SubnetId: !Ref PrivSub2

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:Get*
          - s3:List*
          Resource:
          - arn:aws:s3:::Fadybucket383083849835/*
      Roles:
        - Ref: UdacityS3ReadOnlyEC2

  RolesProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: UdacityS3ReadOnlyEC2

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all public traffic using port 80
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Webserver security group
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref MainVPC


  WebServerLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html        
      # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
      ImageId: !Ref instanceImageID
      # ToDo: Change the key-pair name, as applicable to you. 
      
      SecurityGroups:
      - Ref: WebServerSG
      InstanceType: !Ref IType
      IamInstanceProfile: !Ref RolesProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'


  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: "PrivSub1"
        - Ref: "PrivSub2"
      LaunchConfigurationName:
        Ref: WebServerLC
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebServerTG


  WebServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Ref: "PubSub1"
      - Ref: "PubSub2"
      SecurityGroups:
      - Ref: LoadBalancerSG

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebServerLB
      Port: '80'
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebServerTG
      


  ELBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTG
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1



Outputs:
  DNS:
    Description: loadbalancer DNS
    Value: !Join ["", ["http://" , !GetAtt WebServerLB.DNSName ]]
    Export:
      Name: !Sub "${EnvironmentName}-LB-DNS"